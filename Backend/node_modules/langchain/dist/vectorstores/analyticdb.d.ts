import { PoolConfig } from "pg";
import { VectorStore } from "./base.js";
import { Embeddings } from "../embeddings/base.js";
import { Document } from "../document.js";
export interface AnalyticDBArgs {
    connectionOptions: PoolConfig;
    embeddingDimension?: number;
    collectionName?: string;
    preDeleteCollection?: boolean;
}
export declare class AnalyticDBVectorStore extends VectorStore {
    FilterType: Record<string, any>;
    private pool;
    private embeddingDimension;
    private collectionName;
    private preDeleteCollection;
    private isCreateCollection;
    _vectorstoreType(): string;
    constructor(embeddings: Embeddings, args: AnalyticDBArgs);
    end(): Promise<void>;
    createTableIfNotExists(): Promise<void>;
    deleteCollection(): Promise<void>;
    createCollection(): Promise<void>;
    addDocuments(documents: Document[]): Promise<void>;
    addVectors(vectors: number[][], documents: Document[]): Promise<void>;
    similaritySearchVectorWithScore(query: number[], k: number, filter?: this["FilterType"]): Promise<[Document, number][]>;
    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: Embeddings, dbConfig: AnalyticDBArgs): Promise<AnalyticDBVectorStore>;
    static fromDocuments(docs: Document[], embeddings: Embeddings, dbConfig: AnalyticDBArgs): Promise<AnalyticDBVectorStore>;
    static fromExistingIndex(embeddings: Embeddings, dbConfig: AnalyticDBArgs): Promise<AnalyticDBVectorStore>;
}
