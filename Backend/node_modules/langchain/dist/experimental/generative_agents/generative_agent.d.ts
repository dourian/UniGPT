import { LLMChain } from "../../chains/llm_chain.js";
import { PromptTemplate } from "../../prompts/index.js";
import { BaseLanguageModel } from "../../base_language/index.js";
import { GenerativeAgentMemory } from "./generative_agent_memory.js";
import { ChainValues } from "../../schema/index.js";
import { BaseChain } from "../../chains/base.js";
import { CallbackManagerForChainRun, Callbacks } from "../../callbacks/manager.js";
export type GenerativeAgentConfig = {
    name: string;
    age?: number;
    traits: string;
    status: string;
    verbose?: boolean;
    summaryRefreshSeconds?: number;
};
export declare class GenerativeAgent extends BaseChain {
    name: string;
    age?: number;
    traits: string;
    status: string;
    longTermMemory: GenerativeAgentMemory;
    llm: BaseLanguageModel;
    verbose: boolean;
    private summary;
    private summaryRefreshSeconds;
    private lastRefreshed;
    _chainType(): string;
    get inputKeys(): string[];
    get outputKeys(): string[];
    constructor(llm: BaseLanguageModel, longTermMemory: GenerativeAgentMemory, config: GenerativeAgentConfig);
    parseList(text: string): string[];
    chain(prompt: PromptTemplate): LLMChain;
    getEntityFromObservations(observation: string, runManager?: CallbackManagerForChainRun): Promise<string>;
    getEntityAction(observation: string, entityName: string, runManager?: CallbackManagerForChainRun): Promise<string>;
    summarizeRelatedMemories(observation: string, runManager?: CallbackManagerForChainRun): Promise<string>;
    _call(values: ChainValues, runManager?: CallbackManagerForChainRun): Promise<ChainValues>;
    private _cleanResponse;
    generateReaction(observation: string, now?: Date): Promise<[boolean, string]>;
    generateDialogueResponse(observation: string, now?: Date): Promise<[boolean, string]>;
    getSummary(config?: {
        now?: Date;
        forceRefresh?: boolean;
    }, runManager?: CallbackManagerForChainRun): Promise<string>;
    computeAgentSummary(runManager?: CallbackManagerForChainRun): Promise<string>;
    getFullHeader(config?: {
        now?: Date;
        forceRefresh?: boolean;
    }): string;
    addMemory(memoryContent: string, now?: Date, metadata?: Record<string, unknown>, callbacks?: Callbacks): Promise<ChainValues>;
}
